#! /usr/bin/sollya
execute("common.sollya");

/* implementpoly(p, [-log(2)/512, log(2)/512], 1e-30, DD, "exp_p", "exp.c"); */
/* printexpansion(p-1.0); */
verbosity=1!;
prec=2048!;
write("\n");

/* a simple polynomial for exp f32 */
f = exp(x);
i = [-log(2)/2, log(2)/2];
d = guessdegree(f, i, 0x1p-15);
d;
b = [|0, ..., 4|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type exp_f16_c", "exp", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "exp-f16");

// implementpoly(p, i, 0x1p-84, D, "log_k", "log.c");
/*
f = (2*x/(exp(x)-1) - 2 +x)/(x^2);
i = [0x1p-164, log(2)/2];
d = guessdegree(f, i, 0x1p-24);
d;
b = [|0, 2, 4|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float native_exp_c", "native_exp", b, c);
plot((p(x)-f(x))/f(x), i,
                       postscriptfile, "native-exp-f32");

*/
/*
il= 0.75;
ir= 1.625;
im= dirtyfindzeros(erfc(x)-(0.5*(erfc(il)+erfc(ir))), [il, ir])[0];
im= round(im, 4, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erfc(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 16|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i1_c", "erfc_i1", b, c);
write_coeff(il, "", "const vf_type erfc_i1_left", double);
write_coeff(x0, "", "const vf_type erfc_i1_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i1-f64");


il= 1.625;
ir= 2.75;
im= dirtyfindzeros(erfc(x)-(0.5*(erfc(il)+erfc(ir))), [il, ir])[0];
im= round(im, 4, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erfc(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 16|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i2_c", "erfc_i2", b, c);
write_coeff(il, "", "const vf_type erfc_i2_left", double);
write_coeff(x0, "", "const vf_type erfc_i2_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i2-f64");

*/
/*
i = [0.75, 1.625];
i = [1.625, 2.75];
i = [2.75, 4.0];
i = [4.0, 6.0];
i = [6.0, 9.0];
i = [9.0, 13.5];
i = [13.5, 20.0];
i = [20.0, 27.1];
f = exp(x*x) * erfc(x);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 16|];
c = [|D...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs( p, "const vf_type erfc_i2_c", "erfc_i2", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "erfc_i2-f64");
*/
/* a simple polynomial for exp */
/* 
   pow:
   log function = log((1-s)/(1+s));

f = 3/2*log((1+x)/(1-x))/x;
i= [0x1p-58, (sqrt(3/2)-1)/(1+sqrt(3/2))];
d = guessdegree(f, i, 0x1p-60);
d;
b = [|4, 6, 8, 10, 12, 14|];
c = [|D...|];
p = fpminimax(f, b, c, i, relative, floating, 3+x^2);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type pow_log_c", "pow_log", b, c);
plot((p(x)-f(x))/f(x), i,
                       postscriptfile, "pow-log-f64");
*/
// implementpoly(p, i, 0x1p-55, D, "log2_k", "log2.c");
/*
ir=dirtyfindzeros(erfc(x)-erf(x), [0.4, .5])[0];
*/
/* erfc(x) as polynomial between 0 and 0.75 */
/* 
f = erfc(x);
i = [0x1p-58, 0.75];
d = guessdegree(f, i, 0x1p-58);
d;
b = [|0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21|];
c = [|D, D...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type erfc_i0_c", "erfc_i0", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erf_i0-f64");

/* erfc(x) piecewise polynomial approximations */
/*
il= 0.75;
ir= 1.875;
im= dirtyfindzeros(erfc(x)-(0.5*(erfc(il)+erfc(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erfc(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 23|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i1_c", "erfc_i1", b, c);
write_coeff(il, "", "const vf_type erfc_i1_left", double);
write_coeff(x0, "", "const vf_type erfc_i1_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i1-f64");

il= 1.875;
ir= 3.5;
im= dirtyfindzeros(erfc(x)-(0.5*(erfc(il)+erfc(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erfc(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 23|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i2_c", "erfc_i2", b, c);
write_coeff(il, "", "const vf_type erfc_i2_left", double);
write_coeff(x0, "", "const vf_type erfc_i2_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i2-f64");
*/
/*
il= 3.5;
ir= 5.5;
im= dirtyfindzeros(erfc(x)-(0.5*(erfc(il)+erfc(ir))), [il, ir])[0];
i = [il-im, ir-im];
i;
im;
x0= im;
f = erfc(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 23|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i3_c", "erfc_i3", b, c);
write_coeff(il, "", "const vf_type erfc_i3_left", double);
write_coeff(x0, "", "const vf_type erfc_i3_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i3-f64");

*/

/* erfc(x) f64
   erfc(x) = 2/sqrt(pi) * { x - x^3/3 + x^5/10 - x^7/42 + ... }
          = 2/sqrt(pi) * { x - x^3/P(x^2) }
   erfc(x)/(2/sqrt(pi)) = x - x^3/P(x^2)
   x - erfc(x)/(2/sqrt(pi)) = x^3/P(x^2);
   (x - erfc(x)/(2/sqrt(pi)))/x^3 = 1/P(x^2)


   R(x)= (x)*exp(-x*x)*erfc(x)


   [0.467, 1.5]
   [1.5, 3.0]
   [3.0, 5.0]
   [5.0, 8.0]
   mnewton(erfc(x)-erfc(x), x, 0.5);
   [x = 0.4769362762044698733814183536431305598089697490594706]
*/
/*
il= 1/4+1/8+1/16+1/32+1/128; // 0.4765625
ir= 0.75;
im= il; // (il + ir)*0.5;
i = [il-im, ir-im];
i;
im;
x0= il;
t = erfc(x)*x/(exp(-x*x));
f = t(x+x0);
d = guessdegree(f, i, 0x1p-58);
d;
b = [|0, ..., 12|];
c = [|D, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i1_c", "erfc_i1", b, c);
write_coeff(il, "", "const vf_type erfc_i1_left", double);
write_coeff(x0, "", "const vf_type erfc_i1_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i1-f64");
*/

/*
 * Local variables:
 * mode: c++
 * end:
 */
