//
// Copyright Axel Zeuner 2010-2019. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#if !defined (__CFTAL_CONFIG_H__)
#define __CFTAL_CONFIG_H__ 1

#define __CFTAL_MAJOR__ @CFTAL_VERSION_MAJ@
#define __CFTAL_MINOR__ @CFTAL_VERSION_MIN@
#define __CFTAL_PATCHLEVEL__ @CFTAL_VERSION_PLV@

// configuration options
#define __CFTAL_CFG_USE_VF64_FOR_VF32__ @CFTAL_CFG_USE_VF64_FOR_VF32@
#define __CFTAL_CFG_USE_LARGE_TABLES__ @CFTAL_CFG_USE_LARGE_TABLES@

#if defined (__ARM_NEON)
#if !defined (__ARM_NEON__)
#define __ARM_NEON__ 1
#endif
#endif

#if defined (__GNUC__) || defined (__clang__)
// clang++ -dM -E -x c++ -march=native /dev/null
// g++ -dM -E -x c++ -march=native /dev/null
#define __thread_local __thread
#define __likely(a) __builtin_expect(!!(a), 1)
#define __unlikely(a) __builtin_expect(!!(a), 0)
#define __assume_aligned(p, x) __builtin_assume_aligned(p, x)
#endif

#if defined (__clang__)
#if defined (__FMA__) || defined (__FMA4__)
#define FP_FAST_FMA 1
#define FP_FAST_FMAF 1
#endif
#endif

#if !defined (__GNUC__) && !defined(__clang__) || (IN_KDEVELOP_PARSER>0)
#define alignas(X)
#define __SSSE3__
#define __SSE41__
#define __SSE42__
#define __AVX__
#define __AVX2__
#define __AVX515F__
#endif

#if defined (_MSC_VER)
#define __thread_local __declspec(thread)
#endif

#if !defined (__assume_aligned)
#define __assume_aligned(p, x) p
#endif
#if !defined (__likely)
#define __likely(a) a
#endif
#if !defined (__unlikely)
#define __unlikely(a) a
#endif
#if !defined(__GNUC__) && !defined (__CLANG__)
#define __restrict
#endif
#if !defined(__GNUC__) && !defined (__CLANG__)
#define __attribute__(X)
#endif

// Local variables:
// mode: c++
// end:
#endif
