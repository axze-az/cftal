//
// Copyright Axel Zeuner 2010-2017. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#if !defined (__CFTAL_MATH_LANCZOS_H__)
#define __CFTAL_MATH_LANCZOS_H__ 1

#include <cftal/config.h>
#include <cftal/math/horner.h>

namespace cftal {
    namespace math {

        // an evaluator for lanczos approximations for the gamma
        // functions
        template <typename _T, typename _TBL,
                  std::size_t _P_HIGH_PREC=0, std::size_t _Q_HIGH_PREC=0>
        struct lanczos_rational : public _TBL {
            static
            _T at(_T x) {
                return eval_rational<_P_HIGH_PREC,
                                     _Q_HIGH_PREC>(x, _TBL::p, _TBL::q);
            }
        };

        // a lanczos table from boost
        struct lanczos_table_boost_g_6_0246_N13 {
            static
            constexpr double g() {
                return +6.0246800407767295837402e+00;
                // return  6.024680040776729583740234375;
            }

            static
            constexpr double gm0_5() {
                return +5.5246800407767295837402e+00;
            }
            static
            constexpr const double p[]={
                2.5066282746310002701649081771338373386264310793408,
                210.82427775157934587250973392071336271166969580291,
                8071.6720023658162106380029022722506138218516325024,
                186056.26539522349504029498971604569928220784236328,
                2876370.6289353724412254090516208496135991145378768,
                31426415.585400194380614231628318205362874684987640,
                248874557.86205415651146038641322942321632125127801,
                1439720407.3117216736632230727949123939715485786772,
                6039542586.3520280050642916443072979210699388420708,
                17921034426.037209699919755754458931112671403265390,
                35711959237.355668049440185451547166705960488635843,
                42919803642.649098768957899047001988850926355848959,
                23531376880.410759688572007674451636754734846804940
            };
            static
            constexpr const double q[]={
                +1.0000000000000000000000e+00, // 12
                +6.6000000000000000000000e+01, // 11
                +1.9250000000000000000000e+03, // 10
                +3.2670000000000000000000e+04, // 9
                +3.5742300000000000000000e+05, // 8
                +2.6375580000000000000000e+06, // 7
                +1.3339535000000000000000e+07, // 6
                +4.5995730000000000000000e+07, // 5
                +1.0525807600000000000000e+08, // 4
                +1.5091797600000000000000e+08, // 3
                +1.2054384000000000000000e+08, // 2
                +3.9916800000000000000000e+07, // 1
                +0.0000000000000000000000e+00  // 0
            };
        };

        // the parameters from boost (almost) recreated using maxima
        struct lanczos_table_g_6_02468_N13 {
            static constexpr
            double g() {
                return +6.0246800407767295837402e+00;
            }
            static constexpr
            double gm0_5() {
                return +5.5246800407767295837402e+00;
            }
            static constexpr
            const double p[]={
                +2.5066282746310002416124e+00, // 12
                +2.1082427775157935911921e+02, // 11
                +8.0716720023658162972424e+03, // 10
                +1.8605626539522348321043e+05, // 9
                +2.8763706289353724569082e+06, // 8
                +3.1426415585400193929672e+07, // 7
                +2.4887455786205416917801e+08, // 6
                +1.4397204073117215633392e+09, // 5
                +6.0395425863520278930664e+09, // 4
                +1.7921034426037208557129e+10, // 3
                +3.5711959237355667114258e+10, // 2
                +4.2919803642649101257324e+10, // 1
                +2.3531376880410758972168e+10  // 0
            };
            static constexpr
            const double q[]={
                +1.0000000000000000000000e+00, // 12
                +6.6000000000000000000000e+01, // 11
                +1.9250000000000000000000e+03, // 10
                +3.2670000000000000000000e+04, // 9
                +3.5742300000000000000000e+05, // 8
                +2.6375580000000000000000e+06, // 7
                +1.3339535000000000000000e+07, // 6
                +4.5995730000000000000000e+07, // 5
                +1.0525807600000000000000e+08, // 4
                +1.5091797600000000000000e+08, // 3
                +1.2054384000000000000000e+08, // 2
                +3.9916800000000000000000e+07, // 1
                +0.0000000000000000000000e+00  // 0
            };
            // +-7 using 9,7 in evaluation
        };
#if 1
        template <typename _V>
        using lanczos_rational_f64 =
            lanczos_rational<_V, lanczos_table_g_6_02468_N13, 9, 7>;
#endif

        struct lanczos_table_test_f64 {
static constexpr
double g() {
    return +4.7421875000000000000000e+00;
}
static constexpr
double gm0_5() {
    return +4.2421875000000000000000e+00;
}
static constexpr
const double p[]={
+2.5066282746309931361850e+00, // 14
+2.5618368745742196779247e+02, // 13
+1.1989777642618040772504e+04, // 12
+3.4056301258542324649170e+05, // 11
+6.5587963835866125300527e+06, // 10
+9.0599342507406070828438e+07, // 9
+9.2575514196764767169952e+08, // 8
+7.1093817286602926254272e+09, // 7
+4.1240617702039375305176e+10, // 6
+1.7987042232899075317383e+11, // 5
+5.8078433211486962890625e+11, // 4
+1.3466743684966000976562e+12, // 3
+2.1204535546567524414062e+12, // 2
+2.0302494613933508300781e+12, // 1
+8.9214176041430212402344e+11  // 0
};
static constexpr
const double q[]={
+1.0000000000000000000000e+00, // 14
+9.1000000000000000000000e+01, // 13
+3.7310000000000000000000e+03, // 12
+9.1091000000000000000000e+04, // 11
+1.4744730000000000000000e+06, // 10
+1.6669653000000000000000e+07, // 9
+1.3503647300000000000000e+08, // 8
+7.9094315300000000000000e+08, // 7
+3.3361187860000000000000e+09, // 6
+9.9577037560000000000000e+09, // 5
+2.0313753096000000000000e+10, // 4
+2.6596717056000000000000e+10, // 3
+1.9802759040000000000000e+10, // 2
+6.2270208000000000000000e+09, // 1
+0.0000000000000000000000e+00  // 0
};
        };
#if 0
        template <typename _V>
        using lanczos_rational_f64 =
            lanczos_rational<_V, lanczos_table_test_f64, 14, 14>;
#endif

        struct lanczos_table_g_5_00000_N7 {
            static constexpr
            float g() {
                return +5.0000000000000000000000e+00f;
            }
            static constexpr
            float gm0_5() {
                return +4.5000000000000000000000e+00f;
            }
            static constexpr
            const float p[]={
                +2.5066282751072970214068e+00f, // 6
                +6.8827834691751434093021e+01f, // 5
                +7.8718789720684446820087e+02f, // 4
                +4.8000827958065592611092e+03f, // 3
                +1.6459041605996226280695e+04f, // 2
                +3.0090365763899564626627e+04f, // 1
                +2.2914620627169169893023e+04f  // 0
            };
            static constexpr
            const float q[]={
                +1.0000000000000000000000e+00f, // 6
                +1.5000000000000000000000e+01f, // 5
                +8.5000000000000000000000e+01f, // 4
                +2.2500000000000000000000e+02f, // 3
                +2.7400000000000000000000e+02f, // 2
                +1.2000000000000000000000e+02f, // 1
                +0.0000000000000000000000e+00f  // 0
            };
        };

        // the parameters from boost (almost) recreated using maxima
        struct lanczos_table_test_f32 {
static constexpr
float g() {
    return +5.5917193666100502014160e+00;
}
static constexpr
float gm0_5() {
    return +5.0917193666100502014160e+00;
}
static constexpr
const float p[]={
+2.5066282743377210628921e+00, // 5
+6.4149620966591569981574e+01, // 4
+6.5671595232735478475661e+02, // 3
+3.3616300820818350985064e+03, // 2
+8.6042024505898752977373e+03, // 1
+8.8094560990083755314117e+03  // 0
};
static constexpr
const float q[]={
+1.0000000000000000000000e+00, // 5
+1.0000000000000000000000e+01, // 4
+3.5000000000000000000000e+01, // 3
+5.0000000000000000000000e+01, // 2
+2.4000000000000000000000e+01, // 1
+0.0000000000000000000000e+00  // 0
};
                // g=5, 7 produces +-6 with 4/3
        };
        template <typename _V>
        using lanczos_rational_f32 =
            lanczos_rational<_V, lanczos_table_g_5_00000_N7, 4, 3>;

    }
}

// local variables:
// mode: c++
// end:
#endif
