//
// Copyright Axel Zeuner 2010-2017. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include "cftal/vec.h"
#include "cftal/vec_traits.h"
#include "cftal/math/elem_func.h"
#include "cftal/math/elem_func_core_f64.h"
#include "cftal/test/of_math_funcs.h"
#include "cftal/test/check_expm1.h"
#include <tuple>
#include <iostream>
#include <iomanip>
#include <memory>

namespace cftal {

    namespace math {
        template <typename _FLOAT_T, typename _TRAITS_T>
        struct test_func : public elem_func_core< _FLOAT_T, _TRAITS_T> {
            using base_type = elem_func_core<_FLOAT_T, _TRAITS_T>;
            using my_type = test_func<_FLOAT_T, _TRAITS_T>;
            using vf_type = typename base_type::vf_type;
            using vi_type = typename base_type::vi_type;
            using vmf_type = typename base_type::vmf_type;
            using vmi_type = typename base_type::vmi_type;
            using dvf_type = typename base_type::dvf_type;

            static vf_type func(arg_t<vf_type> vf);
        };

        template <typename _T>
        struct test_func<double, _T> : public elem_func_core<double, _T> {
            using base_type = elem_func_core<double, _T>;
            using vf_type = typename _T::vf_type;
            using vi_type = typename _T::vi_type;
            // using vli_type = typename _T::vli_type;
            using vi2_type = typename _T::vi2_type;
            using vmf_type = typename _T::vmf_type;
            using vmi_type = typename _T::vmi_type;
            using vmi2_type = typename _T::vmi2_type;

            using dvf_type = d_real<vf_type>;
            using tvf_type = t_real<vf_type>;
            using my_type = elem_func_core<double, _T>;

            using d_ops = typename base_type::d_ops;

            static vf_type func(arg_t<vf_type> vf);
            static vf_type func_k(arg_t<vf_type> vf);

            using base_type::ilogbp1_k;
            using base_type::ldexp_k;

        };
    }

    namespace test {

        template <typename _T>
        struct check_func {
            template <std::size_t _N>
            static
            vec<_T, _N>
            v(const vec<_T, _N>& a) {
                using traits_t=math::func_traits<vec<_T, _N>,
                                                 vec<int32_t, _N> >;
                using func_t=math::test_func<_T, traits_t>;
                return func_t::func(a);
            }
            static
            auto
            r(const _T& a) {
                std::pair<_T, _T> i;
                _T v=call_mpfr::func(a, mpfr_rec_sqrt, &i);
                return std::make_tuple(v, i.first, i.second);
            }
            static
            _T
            s(const _T& a) {
                return 1.0/std::sqrt(a);
            }
            static
            const char* fname() { return "func"; }
        };



    }
}

template <typename _T>
typename cftal::math::test_func<double, _T>::vf_type
cftal::math::test_func<double, _T>::func_k(arg_t<vf_type> xc)
{
#if 0
    dvf_type g= vf_type(1.0/sqrt(xc));
    g = g + vf_type(0.5* g.h()) *
        (vf_type(1) - d_ops::mul(xc, g.h())* g.h());
    return g.h();
#else
    vf_type xp=abs(xc);
    // m in [0.5, 1)
    const divisor<vi2_type, int32_t> idiv2(2);
    vi2_type e = ilogbp1_k(xp);
    vi2_type e2= e / idiv2;
    vi2_type r2= e-(e2+e2);
    // select r2c so that r2c [-1,0]
    vmi2_type r2gt0 = r2 > 0;
    vi2_type r2c= _T::sel(r2gt0, r2-2, r2);
    vi2_type e2c= _T::sel(r2gt0, e2+1, e2);
    vi2_type sc= r2c - e;
    vf_type mm0 = ldexp_k(xp, sc);

    // [0.25, 1] : | p - f | <= 2^-2.5400390625
    // coefficients for rsqrt generated by sollya
    // x^0 : +0x8.87f5868ae5188p-2
    const vf_type rsqrt_c0=+2.1327725431704256386922e+00;
    // x^1 : -0x9.bff4077a2a658p-3
    const vf_type rsqrt_c1=-1.2187271675259576664274e+00;
    vf_type mm=impl::poly(mm0,
                          rsqrt_c1,
                          rsqrt_c0);
    // 1st NR --> 6 * 2 == 12
#if 0
    // NR 2.5 -> 5
    mm = mm + 0.5* mm * (1- mm0 * mm* mm);
    // NR 5 -> 10
    mm = mm + 0.5* mm * (1- mm0 * mm* mm);
    // NR 10 -> 20
    mm = mm + 0.5* mm * (1- mm0 * mm* mm);
    // NR 20 -> 40
    mm = mm + 0.5* mm * (1- mm0 * mm* mm);

    dvf_type dmm= vf_type(mm);
    dmm = dmm + vf_type(0.5* dmm.h()) *
        (vf_type(1) - d_ops::mul(mm0, dmm.h())* dmm.h());
    mm = dmm.h();
#else
    // 2.5 -> 7.5
    // 7.5 -> 22.5
    for (int i=0; i<3; ++i) {
        // NR:
        // mm = mm - 0.5*(mm*mm*mm*mm0-mm);
        vf_type s2=mm*mm;
        vf_type s2a=s2*mm0;
        mm = mm - 2*(s2a*mm-mm)/(3*s2a + 1.0);
    }
    dvf_type dmm= vf_type(mm);
    dmm = dmm + vf_type(0.5* dmm.h()) *
        (vf_type(1) - d_ops::mul(mm0, dmm.h())* dmm.h());
    mm = dmm.h();
    // Jarrat method
    //            2 f(x_n)
    // y_n= x_n - ---------
    //            3 f'(x_n)

    //                 3 f'(y_n) + f'(x_n)      f(x_n)
    // x_{n+1} = x_n - --------------------- * --------
    //                 6 f'(y_n) - 2 f'(x_n)    f'(x_n)
#endif
    vf_type t= _T::insert_exp(_T::bias()-e2c);
    mm *=t;
    // mm = ldexp_k(mm, -e2c);
    return mm;
#endif
}


template <typename _T>
typename cftal::math::test_func<double, _T>::vf_type
cftal::math::test_func<double, _T>::func(arg_t<vf_type> xc)
{
    vf_type y=func_k(xc);
    vmf_type is_zero_or_inf_or_nan=
        (xc == vf_type(0)) | isinf(xc) | isnan(xc);
    y=_T::sel(is_zero_or_inf_or_nan, xc, y);
    y=_T::sel(xc ==0, _T::pinf(), y);
    y=_T::sel(xc == _T::pinf(), vf_type(0), y);
    // vf_type sgn=copysign(vf_type(1.0), xc);
    // y=_T::sel(sgn < 0.0, _T::nan(), y);
    y=_T::sel(xc < 0.0, _T::nan(), y);
    return y;
}


int main(int argc, char** argv)
{
    using namespace cftal::test;
    std::cout << std::setprecision(18) << std::scientific;
    std::cerr << std::setprecision(18) << std::scientific;
    const int ulp=2;
    const int _N=4;
    bool rc=true;
    bool speed_only=false;
    std::size_t cnt=update_cnt(0x8000);
    if ((argc > 1) && (std::string(argv[1]) == "--speed")) {
        speed_only=true;
        cnt *=8;
    }
    using ftype = double;

    // func_domain<double> d=std::make_pair(0.0,
    //                                     std::numeric_limits< double >::max());
    func_domain<double> d=std::make_pair(-0x1p-1000,
                                         std::numeric_limits< double >::max());
    exec_stats st(_N);
    auto us=std::make_shared<ulp_stats>();
    rc &= of_fp_func_up_to<
        ftype, _N, check_func<ftype> >::v(st, d, speed_only,
                                          cmp_ulp<ftype>(ulp, us),
                                          cnt);
    std::cout << "ulps: "
              << std::fixed << std::setprecision(4) << *us << std::endl;
    std::cout << st << std::endl;
    return (rc == true) ? 0 : 1;
}
