#include <cftal/constants.h>
#include <iostream>
#include <random>
#include <iomanip>
#include <mpfr.h>

int main(int argc, char** argv)
{
    using namespace cftal;

    const int rep_bits= 16;
    mpfr_t mp_res, mp_res53, mp_res54, mp_res_ru, mp_res_rd, mp_inpt;

    mpfr_init2(mp_res,  53+rep_bits+1);
    mpfr_init2(mp_res_ru, 53);
    mpfr_init2(mp_res_rd, 53);
    mpfr_init2(mp_res53, 53);
    mpfr_init2(mp_res54, 54);
    mpfr_init2(mp_inpt, 53);

    using mpfr_func_1 = int (*)(mpfr_t, const mpfr_t, mpfr_rnd_t);
    mpfr_func_1 mpfr_func = mpfr_exp;

    std::cout << "# bad cases generated by " << argv[0] << '\n';

    std::uniform_int_distribution<std::uint64_t> distribution;
    std::mt19937_64 rnd;

    std::size_t cnt=1000;

    while (cnt != 0) {
        bytes8 input(distribution(rnd));
        double d=input._f64;
        mpfr_set_d(mp_inpt, d, GMP_RNDN);
        mpfr_func(mp_res, mp_inpt, GMP_RNDN);
        mpfr_func(mp_res54, mp_inpt, GMP_RNDN);
        if(mpfr_cmp (mp_res54, mp_res)!=0)
            continue;
        // This is a difficult to round case.
        // first filter results equal to zero, infty, nan , 1.0
        bytes8 res(mpfr_get_d(mp_res, GMP_RNDN));
        if ((uint32_t(res._u64>>32) & 0x7ff00000u) == 0x7ff00000u)
            continue;
        if (res._f64 == 1.0)
            continue;
        if (res._f64 ==0.0)
            continue;
        mpfr_func(mp_res53, mp_inpt, GMP_RNDN);
        if(mpfr_cmp (mp_res54, mp_res53)==0)
            continue;
        bytes8 r53(mpfr_get_d(mp_res53, GMP_RNDN));
        std::cout << "N "
                  << std::hex
                  << std::setfill('0')
                  << std::setw(8)
                  << uint32_t(input._u64>>32)
                  << ' '
                  << std::setw(8)
                  << uint32_t(input._u64)
                  << ' '
                  << std::setw(8)
                  << uint32_t(r53._u64>>32)
                  << ' '
                  << std::setw(8)
                  << uint32_t(r53._u64)
                  << " # "
                  << std::setprecision(18)
                  << std::scientific
                  << input._f64
                  // << " r: "
                  // << r53._f64
                  << std::endl;
        --cnt;
    }
    return 0;
}
