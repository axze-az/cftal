write_d = proc(c) {
    var d, s, v;
    d = double(c);
    v = verbosity!;
    verbosity = 0!;
    s=bashevaluate("/usr/bin/printf %+.22e " @ d)!;
    verbosity = v!;
    write(s);
};

write_d_hex = proc(c) {
    var d, s, v;
    d = double(c);
    v = verbosity!;
    verbosity = 0!;
    s=bashevaluate("/usr/bin/printf %+a " @ d)!;
    verbosity = v!;
    write(s);
};

write_f = proc(c) {
    var f, s, v;
    f = single(c);
    v = verbosity!;
    verbosity = 0!;
    s = bashevaluate("/usr/bin/printf %+.10ef " @ f);
    verbosity = v!;
    write(s);
};

write_f_hex = proc(c) {
    var f, s, v;
    f = single(c);
    v = verbosity!;
    verbosity = 0!;
    s=bashevaluate("/usr/bin/printf %+af " @ f)!;
    verbosity = v!;
    write(s);
};

write_h = proc(c) {
    var f, s, v;
    f = halfprecision(c);
    v = verbosity!;
    verbosity = 0!;
    s = bashevaluate("/usr/bin/printf %+.5e_f16 " @ f);
    verbosity = v!;
    write(s);
};

write_h_hex = proc(c) {
    var f, s, v;
    f = halfprecision(c);
    v = verbosity!;
    verbosity = 0!;
    s=bashevaluate("/usr/bin/printf %+a_f16 " @ f)!;
    verbosity = v!;
    write(s);
};


write_dd_h = proc(c) {
    write_d(c);
};

write_dd_h_hex = proc(c) {
    write_d_hex(c);
};

write_dd_l = proc(c) {
    var dh, dl;
    dh = c;
    dl = dh - double(c);
    write_d(dl);
};

write_dd_l_hex = proc(c) {
    var dh, dl;
    dh = c;
    dl = dh - double(c);
    write_d_hex(dl);
};

write_df_h = proc(c) {
   write_f(c);
};

write_df_h_hex = proc(c) {
   write_f_hex(c);
};

write_df_l = proc(c) {
    var dh, dl;
    dh = c;
    dl = dh - single(c);
    write_f(dl);
};

write_df_l_hex = proc(c) {
    var dh, dl;
    dh = c;
    dl = dh - single(c);
    write_f_hex(dl);
};

write_dh_h = proc(c) {
   write_h(c);
};

write_dh_h_hex = proc(c) {
   write_h_hex(c);
};

write_dh_l = proc(c) {
    var dh, dl;
    dh = c;
    dl = dh - halfprecision(c);
    write_h(dl);
};

write_dh_l_hex = proc(c) {
    var dh, dl;
    dh = c;
    dl = dh - halfprecision(c);
    write_h_hex(dl);
};

write_td_h = proc(c) {
    write_d(c);
};

write_td_h_hex = proc(c) {
    write_d_hex(c);
};

write_td_m = proc(c) {
    write_dd_l(c);
};

write_td_m_hex = proc(c) {
    write_dd_l_hex(c);
};

write_td_l = proc(c) {
    var dh, dm, dl;
    dh = c;
    dm = dh - double(dh);
    dl = dm - double(dm);
    write_d(dl);
};

write_td_l_hex = proc(c) {
    var dh, dm, dl;
    dh = c;
    dm = dh - double(dh);
    dl = dm - double(dm);
    write_d_hex(dl);
};

write_tf_h = proc(c) {
   write_f(c);
};

write_tf_h_hex = proc(c) {
   write_f_hex(c);
};

write_tf_m = proc(c) {
    write_df_l(c);
};

write_tf_m_hex = proc(c) {
    write_df_l_hex(c);
};

write_tf_l = proc(c) {
    var dh, dm, dl;
    dh = c;
    dm = dh - single(dh);
    dl = dm - single(dm);
    write_f(dl);
};

write_tf_l_hex = proc(c) {
    var dh, dm, dl;
    dh = c;
    dm = dh - single(dh);
    dl = dm - single(dm);
    write_f_hex(dl);
};

write_coeff = proc(c, i, pfx, fmt) {
    var dd, t, tdd;
    dd=display;
    tdd=hexadecimal;
    match fmt with
    double:
    {
         write("    // x^", i, " : ");
         write_d_hex(c);
         write("\n");
         write("    ", pfx, i, "=");
         write_d(c);
         write(";\n");
    }
    doubledouble:
    {
         write("    // x^", i, " h: ");
         write_dd_h_hex(c);
         write("\n");
         write("    ", pfx, i, "h=");
         write_dd_h(c);
         write(";\n");
         write("    // x^", i, " l: ");
         write_dd_l_hex(c);
         write("\n");
         write("    ", pfx, i, "l=");
         write_dd_l(c);
         write(";\n");
     }
    tripledouble:
    {
         write("    // x^", i, " h: ");
         write_td_h_hex(c);
         write("\n");
         write("    ", pfx, i, "h=");
         write_td_h(c);
         write(";\n");
         write("    // x^", i, " m: ");
         write_td_m_hex(c);
         write("\n");
         write("    ", pfx, i, "m=");
         write_td_m(c);
         write(";\n");
         write("    // x^", i, " l: ");
         write_td_l_hex(c);
         write("\n");
         write("    ", pfx, i, "l=");
         write_td_l(c);
         write(";\n");
     }
     single:
     {
         write("    // x^", i, " : ");
         write_f_hex(c);
         write("\n");
         write("    ", pfx, i, "=");
         write_f(c);
         write(";\n");
     }
     "floatfloat":
     {
         write("    // x^", i, " h: ");
         write_df_h_hex(c);
         write("\n");
         write("    ", pfx, i, "h=");
         write_df_h(c);
         write(";\n");
         write("    // x^", i, " l: ");
         write_df_l_hex(c);
         write("\n");
         write("    ", pfx, i, "l=");
         write_df_l(c);
         write(";\n");
     }
     49:
     {
         write("    // x^", i, " h: ");
         write_df_h_hex(c);
         write("\n");
         write("    ", pfx, i, "h=");
         write_df_h(c);
         write(";\n");
         write("    // x^", i, " l: ");
         write_df_l_hex(c);
         write("\n");
         write("    ", pfx, i, "l=");
         write_df_l(c);
         write(";\n");
     }
     74:
     {
         write("    // x^", i, " h: ");
         write_tf_h_hex(c);
         write("\n");
         write("    ", pfx, i, "h=");
         write_tf_h(c);
         write(";\n");
         write("    // x^", i, " m: ");
         write_tf_m_hex(c);
         write("\n");
         write("    ", pfx, i, "m=");
         write_tf_m(c);
         write(";\n");
         write("    // x^", i, " l: ");
         write_tf_l_hex(c);
         write("\n");
         write("    ", pfx, i, "l=");
         write_tf_l(c);
         write(";\n");
     }
     halfprecision:
     {
         write("    // x^", i, " : ");
         write_h_hex(c);
         write("\n");
         write("    ", pfx, i, "=");
         write_h(c);
         write(";\n");
     }
     23:
     {
         write("    // x^", i, " h: ");
         write_dh_h_hex(c);
         write("\n");
         write("    ", pfx, i, "h=");
         write_dh_h(c);
         write(";\n");
         write("    // x^", i, " l: ");
         write_dh_l_hex(c);
         write("\n");
         write("    ", pfx, i, "l=");
         write_dh_l(c);
         write(";\n");
     }
     default:
     {
         write("default\n");
     };
     display=dd!;
};

write_coeffs = proc(p, pfx, desc, mlist, fmtlist) {
    var i, j , c, s;
    j=0;
    write("    // coefficients for ", desc , " generated by sollya\n");
    for i in mlist
    do
    {
        c = coeff(p, i);
        s = i;
        fi= fmtlist[j];
        write_coeff(c, s, pfx, fi);
        j = j +1;
    };
};

write_coeff_pow_2_i = proc(cc, i, pfx, fmt) {
    var c;
    c= cc *2^(i/2);
    write_coeff(c, i, pfx, fmt);
};

write_coeffs_pow_2_i = proc(p, pfx, desc, mlist, fmtlist) {
    var i, j , c;
    j=0;
    write("    // coefficients for ", desc , " generated by sollya\n");
    for i in mlist
    do
    {
        c = coeff(p, i);
        fi= fmtlist[j];
        write_coeff_pow_2_i(c, i, pfx, fi);
        j = j +1;
    };
};

write_dd = proc(c) {
    var d0, d1, d2;
    d0 = doubledouble(c);
    d1 = double(d0);
    d2 = double(d0-d1);
    write("_T( ", d1, ", ", d2, ")");
};

write_df = proc(c) {
    var d0, d1, d2;
    d0 = double(c);
    d1 = single(d0);
    d2 = single(d0-d1);
    if (d2 != 0) then
        write("_T( ", d1, "f, ", d2, "f)")
    else
        write("_T( ", d1, "f, 0.0f)");
};

print_dd_poly = proc(p) {
    var n, i, l, c, dd;
    dd = display;
    display=hexadecimal!;
    n = degree(p);
    i = n;
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i);
       if (c != 0) then {
           write("    ");
           write_dd(c);
           if (i>0) then write(",\n") else write("\n");
       };
       i := i -1;
    };
    display=dd!;
};

print_df_poly = proc(p) {
    var n, i, l, c, dd;
    dd = display;
    display=hexadecimal!;
    n = degree(p);
    i = n;
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i);
       if (c!=0) then {
           write("    ");
           write_df(c);
           if (i>0) then write(",\n") else write("\n");
       };
       i := i -1;
    };
    display=dd!;
};

print_d_poly = proc(p) {
    var n, i, l, c, dd;
    dd = display;
    display=decimal!;
    n = degree(p);
    i = n;
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i);
       if (c != 0) then {
           write("    // ");
           printdouble(double(c));
           write("    ");
           write(double(c));
           if (i>0) then write(",\n") else write("\n");
       };
       i := i -1;
    };
    display=dd!;
};

print_d_poly_coeffs = proc(p, pfx, desc) {
    var n, i, l, c, dd;
    dd = display;
    n = degree(p);
    i = n;
    write("\n    // coefficients for ", desc , " generated by sollya\n");
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i);
       if (c != 0) then {
           display=decimal!;
           write("    // x^", i, "\n");
           write("    ", pfx);
           write(i, "=");
           display=hexadecimal!;
           write(double(c));
           display=decimal!;
           write(";  // ");
           printdouble(double(c));
       };
       i := i -1;
    };
    display=dd!;
};

print_f_poly_coeffs = proc(p, pfx, desc) {
    var n, i, l, c, dd;
    dd = display;
    n = degree(p);
    i = n;
    write("\n    // coefficients for ", desc , " generated by sollya\n");
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i);
       if (c != 0) then {
           display=decimal!;
           write("    // x^", i, "\n");
           write("    ", pfx);
           write(i, "=");
           display=hexadecimal!;
           write(single(c));
           display=decimal!;
           write("f;  // ");
           printsingle(single(c));
       };
       i := i -1;
    };
    display=dd!;
};

print_d_poly_coeffs_pow_i = proc(p, pfx, desc) {
    var n, i, l, c, dd;
    dd = display;
    n = degree(p);
    i = n;
    write("\n    // coefficients for ", desc , " generated by sollya\n");
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i) * 2^(i/2);
       if (c != 0) then {
           display=decimal!;
           write("    // x^", i, "\n");
           write("    ", pfx);
           write(i, "=");
           display=hexadecimal!;
           write(double(c));
           display=decimal!;
           write("; // " );
           printdouble(double(c));
       };
       i := i -1;
    };
    display=dd!;
};

print_f_poly_coeffs_pow_i = proc(p, pfx, desc) {
    var n, i, l, c, dd;
    dd = display;
    n = degree(p);
    i = n;
    write("\n    // coefficients for ", desc , " generated by sollya\n");
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i) * 2^(i/2);
       if (c != 0) then {
           display=decimal!;
           write("    // x^", i, "\n");
           write("    ", pfx);
           write(i, "=");
           display=hexadecimal!;
           write(single(c));
           display=decimal!;
           write("f; // " );
           printsingle(single(c));
       };
       i := i -1;
    };
    display=dd!;
};

print_d_poly_pow_i = proc(p) {
    var n, i, l, c, dd;
    dd = display;
    display=hexadecimal!;
    n = degree(p);
    i = n;
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i) * 2^(i/2);
       if (c != 0) then {
           write("    // ");
           printdouble(double(c));
           write("    ");
           write(double(c));
           if (i>0) then write(",\n") else write("\n");
       };
       i := i -1;
    };
    display=dd!;
};

print_f_poly = proc(p) {
    var n, i, l, c, dd;
    dd = display;
    display=hexadecimal!;
    n = degree(p);
    i = n;
    while (i>-1) do {
       l = [| i |];
       c = coeff(p, i);
       if (c != 0.0) then {
           write("    ");
           write(single(c), "f");
           if (i>0) then write(",\n") else write("\n");
       };
       i := i -1;
    };
    display=dd!;
};

write_approx_prec_shift = proc(p, f, i, il) {
    var t, l, r, ilr;
    t = log2(dirtyinfnorm(p-f, i));
    // t = ceil(t*100)/100;
    t = round(t, 12, RU);
    ilr = single(il);
    l = single(inf(i)) + ilr;
    r = single(sup(i)) + ilr;
    write("    // [", l, ", ", r, "] : | p - f | <= 2^", t , "\n");
};

write_approx_prec = proc(p, f, i) {
    write_approx_prec_shift(p, f, i, 0);
};

/*
    L: list with values,
    prefix: prefix of the generated name
    fmt: the format of the values
*/
write_coeff_table = proc(L, prefix, fmt) {
    var len, i, v;
    write("static const ");
    match fmt with
    double:
    {
        write("double");
    }
    single:
    {
        write("float");
    }
    halfprecision:
    {
        write("cftal::f16_t");
    }
    default:
    {
        write("unknown");
    };
    len=length(L);
    write(" ", prefix, "[", len , "]={\n");
    for i from 0 to len-1 do {
        v:= L[i];
        if (i > 0) then {
            write(",\n");
        };
        write("    // ", i, "\n");
        match fmt with
        double:
        {
            write("    // ");
            write_d(v);
            write("\n");
            write("    ");
            write_d_hex(v);
        }
        single:
        {
            write("    // ");
            write_f(v);
            write("\n");
            write("    ");
            write_f_hex(v);
        }
        halfprecision:
        {
            write("    // ");
            write_h(v);
            write("\n");
            write("    ");
            write_h_hex(v);
        }
        default:
        {
            write(v);
        };
    };
    write("\n};\n");
};

/* generate 2^i/n for i in [0, n) */
exp_table = proc(n, fmt) {
    var i, fxi, lh, ll, lf, th, tl, f;
    i=0;
    lh=[||];
    ll=[||];
    lf=[||];
    for i from 0 to n-1 do {
        fxi = 2^(i/n);
        match (fmt) with
        double: {
            th=double(fxi);
            fxi = fxi - th;
            tl=double(fxi);
            if (th != 0) then {
                f = fxi/th;
                f = double(f);
            } else {
                f = 0.0;
            };
        }
        single: {
            th=single(fxi);
            fxi= fxi - th;
            tl=single(fxi);
            if (th != 0) then {
                f = fxi/th;
                f = single(f);
            } else {
                f = 0.0;
            };
        }
        halfprecision: {
            th=halfprecision(fxi);
            fxi= fxi - th;
            tl=halfprecision(fxi);
            if (th != 0) then {
                f = fxi/th;
                f = halfprecision(f);
            } else {
                f = 0.0;
            };
        };
        lh=lh:.th;
        ll=ll:.tl;
        lf=lf:.f;
    };
    write_coeff_table(lf, "_2_pow_i_n_f", fmt);
    write_coeff_table(lh, "_2_pow_i_n_h", fmt);
    write_coeff_table(ll, "_2_pow_i_n_l", fmt);
};

// Local variables:
// mode: c++
// end:
