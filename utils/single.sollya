#! /usr/bin/sollya
execute("common.sollya");

/* implementpoly(p, [-log(2)/512, log(2)/512], 1e-30, DD, "exp_p", "exp.c"); */
/* printexpansion(p-1.0); */
verbosity=1!;
prec=1024!;
write("\n");

/* exp(x) f32 using tang's method */
N = 32;
f = exp(x);
f1 = expm1(x);
g=log(2)/2;
i=[-g/N, g/N];
exp_table(N, single);
b = [|1, ..., 3|];
c = [|SG...|];
p = fpminimax(f1, b, c, i, relative, floating);
write_approx_prec(p, f1, i);
write_coeffs(p, "constexpr\n    const float exp_c", "exp", b, c);
c1h=round(log(2)/N, 24-7-5, RN);
c1l=log(2)/N-c1h;
write_coeff(N/log(2), "", "const float _N_ln2", single);
write_coeff(c1h, "", "const float _ln2_h_N", single);
write_coeff(c1l, "", "const float _ln2_l_N", single);

/* exp(x) f32 */
f= x*(exp(x)+1)/(exp(x)-1);
i = [0, log(2)/2];
b = [|0, 2, 4|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p-2, "const vf_type exp_c", "exp", b, c);
// print_f_poly_coeffs(p-2, "const vf_type exp_c", "exp");
plot((p(x)-f(x))/f(x), [0, log(2)/2],
                       postscriptfile, "exp-f32");

f = (2*x/(exp(x)-1) - 2 +x)/(x^2);
i = [0x1p-512, log(2)/2];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, 2, 4|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_coeffs(p, "const vf_type expn_c", "expn", b, c);
plot((p(x)-f(x))/f(x), i,
                       postscriptfile, "exp-n-f32");

/* a simple polynomial for exp f32 */
f = exp(x);
i = [-log(2)/2, log(2)/2];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 7|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type exp_c", "exp", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "exp-f32");

/* a simple polynomial for higher precision exp f32 */
f = exp(x);
i = [-log(2)/2, log(2)/2];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 8|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "constexpr\n    const float pow_exp_c", "pow_exp", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "pow-exp-f32");

/* expm1(x) f32 */
f= 6*((x*(exp(x)+1)/(exp(x)-1))-2)/(x^2);
p = fpminimax(f, [|2, 4 |], [|SG...|], [0x1p-512, log(2)/2], 1.0,
                 relative, floating);
print_f_poly_coeffs_pow_i(p-1, "const vf_type expm1_c", "expm1");
plot((p(x)-f(x))/f(x), p(x)-f(x), [0x1p-58, log(2)/2],
     postscriptfile, "expm1-f32");

/* exp2(x) f32 */
i = [-0.5, 0.5];
f = 2^x;
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ... , 6|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type exp2_c", "exp2", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
     postscriptfile, "exp2-f32");

/* exp10(x) f32 */
i = [-log(2)/log(10)/2, log(2)/log(10)/2];
f = 10^x;
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ... , 6|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type exp10_c", "exp10", b, c);
write_coeff(log(10), "", "const vf_type log10", single);
write_coeff(log(10)*log(10), "", "const vf_type log10sqr", single);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
     postscriptfile, "exp10-f32");

/* log(x) f32 */
f= log((1+x)/(1-x))/x-2.0;
i= [0x1p-58, (sqrt(2)-1)/(1+sqrt(2))];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|2, 4, 6, 8|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type log_c", "log", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
     postscriptfile, "log-f32");

/* y= (x-1)/(x+1) */
/* log(x) f32 */
f= log((1+x)/(1-x));
i= [0x1p-58, (sqrt(2)-1)/(1+sqrt(2))];
d = guessdegree(f, i, 0x1p-40);
d;
b = [|1, 3, 5, 7, 9, 11|];
c = [|SG, SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type pow_log_c", "pow_log", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "pow-log-f32");
// implementpoly(p, i, 0x1p-38, D, "log", "log.c");


/* pow log with high precision */
/* y= (x-1)/(x+1) */
/* log(x) f64 */
f= log((1+x)/(1-x));
i= [0, (sqrt(2)-1)/(1+sqrt(2))];
d = guessdegree(f, i, 0x1p-40);
d;
b = [|1, 3, 5, 7, 9, 11|];
c = [|SG, 49, SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float pow_log_hp_c", "pow_log_hp", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "pow-log-hp-f32");


/* sin(x) f32 */
i = [0x1p-58, pi/4];
f = sin(x)/x;
b = [|2,4,6,8|];
c = [|SG...|];
p = fpminimax(f, b, c, i, 1.0,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type sin_c", "sin", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "sin-f32");

/* cos(x) f32 */
i = [0x1p-58, pi/4];
f = cos(x)-1+(x^2)/2;
b = [|4,6,8,10|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type cos_c", "cos", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "cos-f32");

/* tan as polynomial in [0, pi/4] */
f = tan(x);
i = [0, pi/4];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|1, 3, 5, 7, 9, 11, 13, 15|];
c = [|SG, SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float tan_c", "tan", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "tan-f32");

/* tan(x) f32 */
f = tan(x)/x;
i = [0x1p-58, 6/7*pi/4];
b = [|2,4,6,8,10,12,14,16,18|];
c = [|SG...|];
p = fpminimax(f, b, c, i, 1.0,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type tan_sun_c", "tan", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "tan-sun-f32");

/* atan(x) f32, piecewise polynomial approximations */
f = atan(x);
i = [0, 0.375];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|1, 3, 5, 7, 9|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float atan_i0_c", "atan_0", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "atan_i0-f32");

il= 0.375;
ir= 1.0;
im= dirtyfindzeros(atan(x)-(0.5*(atan(il)+atan(ir))), [il, ir])[0];
im= round(im, 10, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = atan(x+x0);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 10|];
c = [|49, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const float atan_i1_c", "atan_i1", b, c);
write_coeff(il, "", "const float atan_i1_left", single);
write_coeff(ir, "", "const float atan_i1_right", single);
write_coeff(x0, "", "const float atan_i1_x0", single);
plot((p(x)-f(x))/f(x), i, postscriptfile, "atan_i1-f32");

/* asin(x) f32 */
i = [0x1p-58, 0.5];
f = (asin(x)-x)/(x^3);
b = [|0, 2, 4, 6, 8, 10, 12|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type asin_c", "asin", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "asin-f32");

/* cbrt(x) f32 */
i = [2^-3, 1];
f = (x)^(1/3);
b= [|0,...,1|];
c= [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type cbrt_c", "cbrt", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "cbrt-f32");


/* sinh(x) f32 for calculation over sinh(x+y) = ...*/
f = sinh(x);
i = [0x1p-512, log(2)/2];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|1, 3, 5, 7|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float sinh_c", "sinh", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "sinh-poly-f32");

/* cosh(x) f64 for calculation over cosh(x+y) = ...*/
f = cosh(x);
i = [0x1p-512, log(2)/2];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, 2, 4, 6|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float cosh_c", "cosh", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "cosh-poly-f32");

/* sinh(x) f32 */
f= x^3/(sinh(x)-x);
i =[0x1p-58, 1.0];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, 2, 4, 6|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type sinh_c", "sinh", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "sinh-f32");

/* cosh(x) f32 */
f= (cosh(x)-1)/(x^2);
i =[0x1p-58, log(2.0)];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, 2, 4, 6|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type cosh_c", "cosh", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "cosh-f32");
/* tanh(x) f32 */
/*
       tanh(x) = x - x^3/3 + 2x^5/15
               = x - x^3/(3 + x^2 Q(x^2));
       tanh(x) -x = - x^3/(3 - x^2 Q(x^2));
       (tanh(x) -x)/(-x^3) = 1/(3+x^2 Q(x^2))
           x^3
       ---------- = 3 + Q(x^2);
       x - tanh(x)

*/
f = x^3/(x-tanh(x))-3;
i = [0x1p-512, 1/2+1/16];
d = guessdegree(f, i, 0x1p-28);
d;
b = [| 2, 4, 6|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type tanh_c", "tanh", b, c);
plot((p(x)-f(x))/f(x), i,
                       postscriptfile, "tanh-f32");

/* rsqrt f32 */
f= 1.0/sqrt(x);
i= [2^(-2), 2^(-1)-2^(-5)];
d = guessdegree(f, i, 0x1p-12);
d;
b = [|0, ..., 2|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float rsqrt_i0_c", "rsqrt", b, c);
/* write_coeff(inf(i), "", "const float rsqrt_i0_left", single); */
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "rsqrt-i0-f32");

f= 1.0/sqrt(x);
i= [2^(-1)-2^(-5), 2^(-0)];
d = guessdegree(f, i, 0x1p-12);
d;
b = [|0, ..., 2|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float rsqrt_i1_c", "rsqrt", b, c);
write_coeff(inf(i), "", "const float rsqrt_i1_left", single);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "rsqrt-i1-f32");

/* root12 f32 */
f= x^(1/12);
i= [2^(-12), 2^(-9)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 2|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float root12_i0_c", "root12_i0", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i0-f32");

/* root12 f32 */
f= x^(1/12);
i= [2^(-9), 2^(-6)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 2|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float root12_i1_c", "root12_i1", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i1-f32");

/* root12 f32 */
f= x^(1/12);
i= [2^(-6), 2^(-3)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 2|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float root12_i2_c", "root12_i2", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i2-f32");

/* root12 f32 */
f= x^(1/12);
i= [2^(-3), 2^(-0)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 2|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float root12_i3_c", "root12_i3", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i3-f32");


/* sin(x) f32 ~29 bits */
i = [0x1p-64, pi/4];
f = sin(x);
d = guessdegree(f, i, 0x1p-29);
d;
b = [|1, 3, 5, 7, 9, 11, 13|];
c = [|SG, SG, SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float sin_c", "sin", b, c);
/*implementpoly(p, i, 0x1p-29, single, "__sin_k", "sin32.c");*/
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "sin-f32-ep");

/* cos(x) f32 ~29 bits*/
i = [0x1p-64, pi/4];
f = cos(x);
d = guessdegree(f, i, 0x1p-29);
d;
b = [|0, 2, 4, 6, 8, 10, 12|];
c = [|SG, SG, SG, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float cos_c", "cos", b, c);
/*implementpoly(p, i, 0x1p-29, single, "__cos_k", "cos32.c");*/
plot((p(x)-f(x))/f(x), p(x)-f(x), i,
                       postscriptfile, "cos-f32-ep");


/* asinh(x) f32 */
f = asinh(x);
i = [0, sqrt(2)/2];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|1, 3, 5, 7, 9, 11, 13, 15|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float asinh_i0_c", "asinh_i0", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "asinh_i0-f32");

il= sqrt(2)/2;
ir= 3.0;
im= dirtyfindzeros(asinh(x)-(0.5*(asinh(il)+asinh(ir))), [il, ir])[0];
im= round(im, 10, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = asinh(x+x0);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 15|];
c = [|49, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const float asinh_i1_c", "asinh_i1", b, c);
write_coeff(il, "", "const float asinh_i1_left", single);
write_coeff(ir, "", "const float asinh_i1_right", single);
write_coeff(x0, "", "const float asinh_i1_x0", single);
plot((p(x)-f(x))/f(x), i, postscriptfile, "asinh_i1-f32");

/* acosh f32 */
i = [0x1p-30, 1.0];
f = acosh(1+x)/sqrt(2*x);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 7|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float acosh_i0_c", "acosh_i0", b, c);
plot((p(x)-f(x))/f(x), i,
                       postscriptfile, "acosh_i0-f32");

il= 2.0;
ir= 3.5;
im= dirtyfindzeros(acosh(x)-(0.5*(acosh(il)+acosh(ir))), [il, ir])[0];
im= round(im, 10, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = acosh(x+x0);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 10|];
c = [|49, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const float acosh_i1_c", "acosh_i1", b, c);
write_coeff(il, "", "const float acosh_i1_left", single);
write_coeff(ir, "", "const float acosh_i1_right", single);
write_coeff(x0, "", "const float acosh_i1_x0", single);
plot((p(x)-f(x))/f(x), i, postscriptfile, "acosh_i1-f32");

/* atanh(x) piecewise polynomial approximations */
i = [0, 0.5];
f = atanh(x);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|1, 3, 5, 7, 9, 11, 13|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec(p, f, i);
write_coeffs(p, "const float atanh_i0_c", "atanh_i0", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "atanh_i0-f32");

il= 0.5;
ir= /* sqrt(2)/2*/ 0.75;
im= dirtyfindzeros(atanh(x)-(0.5*(atanh(il)+atanh(ir))), [il, ir])[0];
im= round(im, 10, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = atanh(x+x0);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 9|];
c = [|49, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const float atanh_i1_c", "atanh_i1", b, c);
write_coeff(il, "", "const float atanh_i1_left", single);
write_coeff(x0, "", "const float atanh_i1_x0", single);
plot((p(x)-f(x))/f(x), i, postscriptfile, "atanh_i1-f32");

/*
 * Local variables:
 * mode: c++
 * end:
 */
