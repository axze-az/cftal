#! /usr/bin/sollya
execute("common.sollya");

/* implementpoly(p, [-log(2)/512, log(2)/512], 1e-30, DD, "exp_p", "exp.c"); */
/* printexpansion(p-1.0); */
verbosity=2!;
prec=512!;
write("\n");

/* erf(x) f64
   erf(x) = 2/sqrt(pi) * { x - x^3/3 + x^5/10 - x^7/42 + ... }
          = 2/sqrt(pi) * { x - x^3/P(x^2) }
   erf(x)/(2/sqrt(pi)) = x - x^3/P(x^2)
   x - erf(x)/(2/sqrt(pi)) = x^3/P(x^2);
   (x - erf(x)/(2/sqrt(pi)))/x^3 = 1/P(x^2)
*/
t=erf(x)/(2/sqrt(pi));
f = (x^3)/(x-t(x));
i = [0x1p-58, 0.75];
b = [|0, 2, 4, 6, 8, 10, 12, 14, 16, 18|];
c = [|D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type erf_i0_c", "erf_i0", b, c);
write_coeff(2/sqrt(pi), "", "const vf_type two_o_sqrt_pi", doubledouble);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erf_i0-f64");

points=1000;

/* erf(x) as polynomial between 0 and 0.75 */
f = erf(x);
i = [0x1p-58, 0.75];
d = guessdegree(f, i, 0x1p-58);
d;
b = [|1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23|];
c = [|D...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const vf_type erf_i0_c", "erf_i0", b, c);
write_coeff(2/sqrt(pi), "", "const vf_type two_o_sqrt_pi", doubledouble);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erf_i0-f64");

/* erf(x) piecewise polynomial approximations */
il= 0.75;
ir= 1.875;
im= dirtyfindzeros(erf(x)-(0.5*(erf(il)+erf(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erf(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 21|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erf_i1_c", "erf_i1", b, c);
write_coeff(il, "", "const vf_type erf_i1_left", double);
write_coeff(x0, "", "const vf_type erf_i1_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erf_i1-f64");

il= 1.875;
ir= 3.5;
im= dirtyfindzeros(erf(x)-(0.5*(erf(il)+erf(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erf(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 21|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erf_i2_c", "erf_i2", b, c);
write_coeff(il, "", "const vf_type erf_i2_left", double);
write_coeff(x0, "", "const vf_type erf_i2_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erf_i2-f64");

il= 3.5;
ir= 6.00;
im= dirtyfindzeros(erf(x)-(0.5*(erf(il)+erf(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = erf(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 21|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erf_i3_c", "erf_i3", b, c);
write_coeff(il, "", "const vf_type erf_i3_left", double);
write_coeff(x0, "", "const vf_type erf_i3_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erf_i3-f64");

/* erfc(x) as polynomial between 0 and 0.75 */
f = erfc(x);
i = [0, 0.75];
d = guessdegree(f, i, 0x1p-58);
d;
b = [|0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23|];
c = [|D...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const double erfc_i0_c", "erfc_i0", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i0-f64");


g= exp(x*x)*x*erfc(x);
/* erfc(x) piecewise polynomial approximations */
il= 0.75;
ir= 2.75;
im= dirtyfindzeros(g(x)-(0.5*(g(il)+g(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = g(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 21|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i1_c", "erfc_i1", b, c);
write_coeff(il, "", "const vf_type erfc_i1_left", double);
write_coeff(x0, "", "const vf_type erfc_i1_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i1-f64");

g= exp(x*x)*x*erfc(x);
il= 2.75;
ir= 6.0;
im= dirtyfindzeros(g(x)-(0.5*(g(il)+g(ir))), [il, ir])[0];
im= round(im, 24, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = g(x+x0);
d = guessdegree(f, i, 0x1p-60);
d;
b = [|0, ..., 21|];
c = [|DD, D...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const vf_type erfc_i2_c", "erfc_i2", b, c);
write_coeff(il, "", "const vf_type erfc_i2_left", double);
write_coeff(x0, "", "const vf_type erfc_i2_x0", double);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i2-f64");

i=[1/6.0, 1/27.25];
deg=25;
f=exp(1/x*1/x)*1/x*erfc(1/x);
b=[|0, ..., deg|];
c= [|D, D...|];
p=fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const double erfc_i3_c", "erfc", b, c);
plot(log(abs(p(x)-f(x))), i, postscriptfile, "erfc_i3-f64");

/*
 * Local variables:
 * mode: c++
 * end:
 */
