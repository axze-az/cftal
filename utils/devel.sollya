#! /usr/bin/sollya
execute("common.sollya");

/* implementpoly(p, [-log(2)/512, log(2)/512], 1e-30, DD, "exp_p", "exp.c"); */
/* printexpansion(p-1.0); */
verbosity=1!;
prec=2048!;
write("\n");

/* rsqrt f32 */
f= 1.0/sqrt(x);
i= [2^(-2), 2^(-1)];
d = guessdegree(f, i, 0x1p-12);
d;
b = [|0, ..., 3|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float rsqrt_i0_c", "rsqrt", b, c);
/* write_coeff(inf(i), "", "const float rsqrt_i0_left", single); */
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "rsqrt-i0-f32");

f= 1.0/sqrt(x);
i= [2^(-1), 2^(-0)];
d = guessdegree(f, i, 0x1p-12);
d;
b = [|0, ..., 3|];
c = [|SG...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float rsqrt_i1_c", "rsqrt", b, c);
write_coeff(inf(i), "", "const float rsqrt_i1_left", single);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "rsqrt-i1-f32");

/*
print_table=proc(f, x0, n, inc, fmt, pfx) {
    var xx, y, i, s;
    s := pfx @ "[]= {\n";
    write(s);
    i := 0;
    while (i<n) do {
        xx := x0 + i * inc;
        y := f(xx);
        write("// exp(");
        write_d(xx);
        write(");\n");
        write_dd(y);
        if (i < n-1) then
            write(",\n")
        else
            write("\n");
        i := i + 1;
    };
    s :="};\n";
    write(s);
};

c=[|D...|];
n=2^4;
inc=log(2)/2/n;
x0=-log(2)/2;
pfx="const double exp_t";
print_table(exp(x), x0, n, inc, c, pfx);
*/


/*
 * Local variables:
 * mode: c++
 * end:
 */
