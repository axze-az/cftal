#! /usr/bin/sollya
execute("common.sollya");

/* implementpoly(p, [-log(2)/512, log(2)/512], 1e-30, DD, "exp_p", "exp.c"); */
/* printexpansion(p-1.0); */
verbosity=1!;
prec=2048!;
write("\n");

/* root12 f64 */
f= x^(1/12);
i= [2^(-12), 2^(-9)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 3|];
c = [|D...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const double root12_i0_c", "root12_i0", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i0-f64");

/* root12 f64 */
f= x^(1/12);
i= [2^(-9), 2^(-6)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 3|];
c = [|D...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const double root12_i1_c", "root12_i1", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i1-f64");

/* root12 f64 */
f= x^(1/12);
i= [2^(-6), 2^(-3)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 3|];
c = [|D...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const double root12_i2_c", "root12_i2", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i2-f64");

/* root12 f64 */
f= x^(1/12);
i= [2^(-3), 2^(-0)];
d = guessdegree(f, i, 0x1p-8);
d;
b = [|0, ..., 3|];
c = [|D...|];
p = fpminimax(f, b, c, i,
              relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const double root12_i3_c", "root12_i3", b, c);
plot((p(x)-f(x))/f(x), p(x)-f(x),
                       i,
                       postscriptfile, "root12-i3-f64");

/*
print_table=proc(f, x0, n, inc, fmt, pfx) {
    var xx, y, i, s;
    s := pfx @ "[]= {\n";
    write(s);
    i := 0;
    while (i<n) do {
        xx := x0 + i * inc;
        y := f(xx);
        write("// exp(");
        write_d(xx);
        write(");\n");
        write_dd(y);
        if (i < n-1) then
            write(",\n")
        else
            write("\n");
        i := i + 1;
    };
    s :="};\n";
    write(s);
};

c=[|D...|];
n=2^4;
inc=log(2)/2/n;
x0=-log(2)/2;
pfx="const double exp_t";
print_table(exp(x), x0, n, inc, c, pfx);
*/


/*
 * Local variables:
 * mode: c++
 * end:
 */
