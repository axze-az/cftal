#! /usr/bin/sollya
execute("common.sollya");

/* implementpoly(p, [-log(2)/512, log(2)/512], 1e-30, DD, "exp_p", "exp.c"); */
/* printexpansion(p-1.0); */
verbosity=1!;
prec=2048!;
write("\n");

/* erfc(x) as polynomial between 0 and 0.75 */
f = erfc(x);
i = [0, 0.75];
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, 1, 3, 5, 7, 9, 11|];
c = [|SG...|];
p = fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float erfc_i0_c", "erfc_i0", b, c);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i0-f32");


g= exp(x*x)*x*erfc(x);
/* erfc(x) piecewise polynomial approximations */
il= 0.75;
ir= 2.00;
im= dirtyfindzeros(g(x)-(0.5*(g(il)+g(ir))), [il, ir])[0];
im= round(im, 12, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = g(x+x0);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 11|];
c = [|49, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const float erfc_i1_c", "erfc_i1", b, c);
write_coeff(il, "", "const float erfc_i1_left", single);
write_coeff(x0, "", "const float erfc_i1_x0", single);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i1-f32");

g= exp(x*x)*x*erfc(x);
il= 2.0;
ir= 4.0;
im= dirtyfindzeros(g(x)-(0.5*(g(il)+g(ir))), [il, ir])[0];
im= round(im, 12, RN);
i = [il-im, ir-im];
i;
im;
x0= im;
f = g(x+x0);
d = guessdegree(f, i, 0x1p-28);
d;
b = [|0, ..., 11|];
c = [|49, SG...|];
p = fpminimax(f, b, c, i, relative, floating);
p;
write_approx_prec_shift(p, f, i, im);
write_coeffs(p, "const float erfc_i2_c", "erfc_i2", b, c);
write_coeff(il, "", "const float erfc_i2_left", single);
write_coeff(x0, "", "const float erfc_i2_x0", single);
plot((p(x)-f(x))/f(x), i, postscriptfile, "erfc_i2-f32");

i=[1/4.0, 1/10.0125];
deg=13;
f=exp(1/x*1/x)*1/x*erfc(1/x);
b=[|0, ..., deg|];
c= [|49, SG...|];
p=fpminimax(f, b, c, i, relative, floating);
write_approx_prec(p, f, i);
write_coeffs(p, "const float erfc_i3_c", "erfc", b, c);
plot(log(abs(p(x)-f(x))), i, postscriptfile, "erfc_i3-f32");

/*
 * Local variables:
 * mode: c++
 * end:
 */
